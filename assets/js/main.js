console.log('This site was generated by Hugo.');

document.addEventListener('DOMContentLoaded', () => {
  // Mobile nav toggle
  const navToggleBtn = document.querySelector('[data-nav-toggle]');
  const navEl = document.querySelector('[data-nav]');
  if (navToggleBtn && navEl) {
    navToggleBtn.addEventListener('click', () => {
      const open = navEl.classList.toggle('is-open');
      navToggleBtn.setAttribute('aria-expanded', open ? 'true' : 'false');
    });
  }

  // Sticky header scrolled state
  const headerEl = document.querySelector('body > header');
  if (headerEl) {
    const setScrolled = () => headerEl.classList.toggle('is-scrolled', window.scrollY > 8);
    setScrolled();
    window.addEventListener('scroll', setScrolled, { passive: true });
  }

  const toc = document.querySelector('.toc-dropdown');
  if (toc) {
    toc.addEventListener('click', (e) => {
      const target = e.target;
      if (target && target.tagName === 'A') {
        toc.open = false;
      }
    });
  }

  // Archive search wiring
  const searchInput = document.getElementById('archive-search');
  const groupsEl = document.getElementById('archive-groups');
  const resultsEl = document.getElementById('archive-results');
  if (searchInput && groupsEl && resultsEl) {
    let fuseInstance = null;
    let indexData = null;

    const renderResults = (items) => {
      if (!Array.isArray(items)) return;
      if (items.length === 0) {
        resultsEl.innerHTML = '<p>No results</p>';
        return;
      }
      const html = items.map((r) => {
        const item = r.item || r; // support raw array or Fuse result
        const title = item.title || '';
        const date = item.date || '';
        const link = item.permalink || '#';
        const summary = item.summary || '';
        return `
          <article class="archive-result">
            <h3><a href="${link}">${title}</a></h3>
            <time class="date">${date}</time>
            <p class="summary">${summary}</p>
          </article>
        `;
      }).join('');
      resultsEl.innerHTML = html;
    };

    const showGroups = () => {
      groupsEl.hidden = false;
      resultsEl.hidden = true;
    };
    const showResults = () => {
      groupsEl.hidden = true;
      resultsEl.hidden = false;
    };

    const initFuse = async () => {
      if (fuseInstance) return fuseInstance;
      if (!indexData) {
        try {
          const res = await fetch('/index.json', { cache: 'no-store' });
          if (!res.ok) return null;
          indexData = await res.json();
        } catch (e) {
          // Fail silently to avoid breaking page
          return null;
        }
      }
      if (!Array.isArray(indexData)) return null;
      const options = {
        includeScore: true,
        ignoreLocation: true,
        minMatchCharLength: 2,
        threshold: 0.3,
        keys: [
          { name: 'title', weight: 2 },
          { name: 'summary', weight: 1 },
          { name: 'tags', weight: 0.5 },
          { name: 'categories', weight: 0.5 },
          { name: 'content', weight: 0.25 }
        ]
      };
      if (window.Fuse) {
        fuseInstance = new window.Fuse(indexData, options);
      }
      return fuseInstance;
    };

    searchInput.addEventListener('input', async (ev) => {
      const q = (ev.target.value || '').trim();
      if (q.length === 0) {
        showGroups();
        return;
      }
      const fuse = await initFuse();
      if (!fuse) return;
      const results = fuse.search(q).slice(0, 50);
      renderResults(results);
      showResults();
    });
  }

  // PhotoSwipe lightbox for all images in article content
  (async () => {
    const article = document.querySelector('article.content');
    if (!article) return;

    try {
      const { default: PhotoSwipeLightbox } = await import('https://cdn.jsdelivr.net/npm/photoswipe@5/dist/photoswipe-lightbox.esm.min.js');
      const lightbox = new PhotoSwipeLightbox({
        gallery: 'article.content',
        children: 'a[data-pswp-width]',
        wheelToZoom: true,
        // dynamic import of core
        pswpModule: () => import('https://cdn.jsdelivr.net/npm/photoswipe@5/dist/photoswipe.esm.min.js')
      });
      lightbox.init();

      // Fallback for anchors that wrap images but have no data-pswp-* attributes
      const anchorItems = Array.from(article.querySelectorAll('a[href]:not([data-pswp-width])'))
        .map(a => ({ a, img: a.querySelector('img') }))
        .filter(x => x.img);

      if (anchorItems.length) {
        const { default: LB } = await import('https://cdn.jsdelivr.net/npm/photoswipe@5/dist/photoswipe-lightbox.esm.min.js');
        const dataSource = anchorItems.map(({ a, img }) => ({
          src: a.getAttribute('href'),
          width: img.naturalWidth || img.width || 800,
          height: img.naturalHeight || img.height || 600,
          alt: img.alt || ''
        }));
        const lbLinks = new LB({
          dataSource,
          wheelToZoom: true,
          pswpModule: () => import('https://cdn.jsdelivr.net/npm/photoswipe@5/dist/photoswipe.esm.min.js')
        });
        lbLinks.init();
        anchorItems.forEach(({ a }, i) => {
          a.style.cursor = 'zoom-in';
          a.addEventListener('click', (e) => { e.preventDefault(); lbLinks.loadAndOpen(i); });
        });
      }

      // Fallback for images not wrapped by render hooks (no data-pswp-width)
      const orphanImgs = Array.from(article.querySelectorAll('img:not(a img)'));
      if (orphanImgs.length) {
        const { default: LB } = await import('https://cdn.jsdelivr.net/npm/photoswipe@5/dist/photoswipe-lightbox.esm.min.js');
        const dataSource = orphanImgs.map((el) => ({
          src: el.currentSrc || el.src,
          width: el.naturalWidth || el.width || 800,
          height: el.naturalHeight || el.height || 600
        }));
        const lb = new LB({
          dataSource,
          wheelToZoom: true,
          pswpModule: () => import('https://cdn.jsdelivr.net/npm/photoswipe@5/dist/photoswipe.esm.min.js')
        });
        lb.init();
        orphanImgs.forEach((img, i) => {
          img.style.cursor = 'zoom-in';
          img.addEventListener('click', () => lb.loadAndOpen(i));
        });
      }
    } catch (e) {
      // no-op if CDN blocked
    }
  })();

  // Copy-to-clipboard for code blocks
  document.addEventListener('click', async (ev) => {
    const btn = ev.target.closest('[data-copy-code]');
    if (!btn) return;
    const wrapper = btn.closest('.codeblock');
    if (!wrapper) return;
    // Find the code element
    const pre = wrapper.querySelector('.highlight pre');
    if (!pre) return;
    try {
      const text = pre.textContent || '';
      await navigator.clipboard.writeText(text);
      const original = btn.textContent;
      btn.textContent = 'Copied';
      setTimeout(() => { btn.textContent = original; }, 1200);
    } catch (e) {
      // ignore
    }
  });
  
  // Theme toggle
  const themeBtn = document.querySelector('[data-theme-toggle]');
  if (themeBtn) {
    const root = document.documentElement;
    const applyTheme = (theme) => {
      root.setAttribute('data-theme', theme);
      localStorage.setItem('theme', theme);
      themeBtn.setAttribute('aria-label', theme === 'dark' ? 'Switch to light theme' : 'Switch to dark theme');
    };
    const current = root.getAttribute('data-theme') || (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
    applyTheme(current);
    themeBtn.addEventListener('click', () => {
      const next = root.getAttribute('data-theme') === 'dark' ? 'light' : 'dark';
      applyTheme(next);
      // Notify listeners (e.g., mermaid re-render)
      try { window.dispatchEvent(new Event('themechange')); } catch (_) {}
    });
  }
});
